Skip to main content
05_data_exploration_amazon_dataset.ipynb
05_data_exploration_amazon_dataset.ipynbC_
Amazon Product Data Analysis
Dataset Overview
Contains product listings from various categories with pricing, ratings, and review information
Key columns: product_id, product_name, category, discounted_price, actual_price, rating, review_content
Total records: [Add your dataset size here]
Category Analysis
1. Main Category Distribution
Main Categories

Visualization: Horizontal bar chart showing product count per main category
Key Insights:
Computers & Accessories dominates the dataset
Electronics/Home Theater is second largest category
Helps identify focus areas for inventory management
2. Sub-Category Distribution
Sub Categories

Visualization: Horizontal bar chart showing product count per sub-category
Key Insights:
Cables & Accessories is most populated sub-category
USBCables and WirelessUSBAdapters are prominent
Helps understand product type distribution
3. Category Hierarchy
Hierarchical View

Visualization: Stacked bar chart showing main-sub category relationships
Key Insights:
Computers&Accessories > Cables&Accessories has maximum products
Helps see category-subcategory relationships at glance
Rating Analysis
Ratings Distribution

Visualization: Histogram with KDE showing rating distribution
Key Insights:
Most products have ratings between 4.0-4.5
Few products have ratings below 3.5
Helps identify quality trends
Pricing Analysis
Price Distribution

Visualization: Box plots showing price distribution across categories
Key Insights:
Smart TVs show widest price range
Cables & Accessories have most consistent pricing
Helps understand market segments
Discount Analysis
Discount vs Rating

Visualization: Scatter plot showing discount percentage vs ratings
Key Insights:
Higher discounts (>70%) tend to have slightly lower ratings
Best rated products (4.5+) have moderate discounts (30-50%)
Helps evaluate discount strategies
Key Observations
Category Concentration:

60% of products belong to Computers & Accessories
Cables constitute 45% of all listed products
Pricing Patterns:

Smart TVs range from ₹11,499 to ₹32,999
Most cables priced under ₹500
Quality Signals:

Average rating: 4.1/5
Top-rated categories: Networking Devices (4.3), Smart TVs (4.2)
Discount Strategy:

Maximum discount observed: 90%
Average discount: 52%
Next Steps
Investigate why high-discount products have lower ratings
Analyze review content for quality insights
Compare pricing strategies across sub-categories
Explore relationships between rating counts and product popularity

[ ]
   1
   2
   3
   4
   5
   6
   7
   8
   9
  10
  11
  12
  13
  14
  15
  16
  17
  18
  19
  20
  21
  22
  23
  24
  25
  26
  27
  28
  29
  30
  31
  32
  33
  34
  35
  36
  37
  38
  39
from google.colab import drive
drive.mount('/content/drive', force_remount=True)

import os
import pandas as pd
import sys
from pathlib import Path

# Add project root directory to sys.path
project_root = Path("/content/drive/My Drive/E-commerce_Analysis")
if str(project_root) not in sys.path:
    sys.path.insert(0, str(project_root))

print("Python path updated:")
print(sys.path[:5])

# Set display option for long text
pd.set_option('display.max_colwidth', None)

# Define the file path to your Amazon dataset with images
amazon_data_path = "/content/drive/My Drive/E-commerce_Analysis/data/raw/amazon_with_images.csv"

# Verify file existence
if os.path.exists(amazon_data_path):
    print("Amazon dataset with images found!")
else:
    print("Amazon dataset with images not found. Check the file path.")

# Load the dataset
amazon_df = pd.read_csv(amazon_data_path)
print("Amazon Sales Dataset Columns:")
print(amazon_df.columns.tolist())

print("\nSample data:")
print(amazon_df.head())

# Set device explicitly
device = "cpu"
print(f"Device set to: {device}")
Mounted at /content/drive
Python path updated:
['/content/drive/My Drive/E-commerce_Analysis', '/content', '/env/python', '/usr/lib/python311.zip', '/usr/lib/python3.11']
Amazon dataset with images found!
Amazon Sales Dataset Columns:
['product_id', 'product_name', 'category', 'discounted_price', 'actual_price', 'discount_percentage', 'rating', 'rating_count', 'about_product', 'user_id', 'user_name', 'review_id', 'review_title', 'review_content', 'product_link', 'image_url']

Sample data:
   product_id  \
0  B07JW9H4J1   
1  B098NS6PVG   
2  B096MSW6CT   
3  B08HDJ86NZ   
4  B08CF3B7N1   

                                                                                                                                                                                              product_name  \
0                                       Wayona Nylon Braided USB to Lightning Fast Charging and Data Sync Cable Compatible for iPhone 13, 12,11, X, 8, 7, 6, 5, iPad Air, Pro, Mini (3 FT Pack of 1, Grey)   
1        Ambrane Unbreakable 60W / 3A Fast Charging 1.5m Braided Type C Cable for Smartphones, Tablets, Laptops & other Type C devices, PD Technology, 480Mbps Data Sync, Quick Charge 3.0 (RCT15A, Black)   
2                                                                 Sounce Fast Phone Charging Cable & Data Sync USB Cable Compatible for iPhone 13, 12,11, X, 8, 7, 6, 5, iPad Air, Pro, Mini & iOS Devices   
3  boAt Deuce USB 300 2 in 1 Type-C & Micro USB Stress Resistant, Tangle-Free, Sturdy Cable with 3A Fast Charging & 480mbps Data Transmission, 10000+ Bends Lifespan and Extended 1.5m Length(Martian Red)   
4                                                                                           Portronics Konnect L 1.2M Fast Charging 3A 8 Pin USB Cable with Charge & Sync Function for iPhone, iPad (Grey)   

                                                                            category  \
0  Computers&Accessories|Accessories&Peripherals|Cables&Accessories|Cables|USBCables   
1  Computers&Accessories|Accessories&Peripherals|Cables&Accessories|Cables|USBCables   
2  Computers&Accessories|Accessories&Peripherals|Cables&Accessories|Cables|USBCables   
3  Computers&Accessories|Accessories&Peripherals|Cables&Accessories|Cables|USBCables   
4  Computers&Accessories|Accessories&Peripherals|Cables&Accessories|Cables|USBCables   

  discounted_price actual_price discount_percentage rating rating_count  \
0             ₹399       ₹1,099                 64%    4.2       24,269   
1             ₹199         ₹349                 43%      4       43,994   
2             ₹199       ₹1,899                 90%    3.9        7,928   
3             ₹329         ₹699                 53%    4.2       94,363   
4             ₹154         ₹399                 61%    4.2       16,905   

about_product  \
0                                                                                                                                     High Compatibility : Compatible With iPhone 12, 11, X/XsMax/Xr ,iPhone 8/8 Plus,iPhone 7/7 Plus,iPhone 6s/6s Plus,iPhone 6/6 Plus,iPhone 5/5s/5c/se,iPad Pro,iPad Air 1/2,iPad mini 1/2/3,iPod nano7,iPod touch and more apple devices.|Fast Charge&Data Sync : It can charge and sync simultaneously at a rapid speed, Compatible with any charging adaptor, multi-port charging station or power bank.|Durability : Durable nylon braided design with premium aluminum housing and toughened nylon fiber wound tightly around the cord lending it superior durability and adding a bit to its flexibility.|High Security Level : It is designed to fully protect your device from damaging excessive current.Copper core thick+Multilayer shielding, Anti-interference, Protective circuit equipment.|WARRANTY: 12 months warranty and friendly customer services, ensures the long-time enjoyment of your purchase. If you meet any question or problem, please don't hesitate to contact us.   
1                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        Compatible with all Type C enabled devices, be it an android smartphone (Mi, Samsung, Oppo, Vivo, Realme, OnePlus, etc), tablet, laptop (Macbook, Chromebook, etc)|Supports Quick Charging (2.0/3.0)|Unbreakable – Made of special braided outer with rugged interior bindings, it is ultra-durable cable that won’t be affected by daily rough usage|Ideal Length – It has ideal length of 1.5 meters which is neither too short like your typical 1meter cable or too long like a 2meters cable|Supports maximum 3A fast charging and 480 Mbps data transfer speed|6 months manufacturer warranty from the date of purchase   
2  【 Fast Charger& Data Sync】-With built-in safety proctections and four-core copper wires promote maximum signal quality and strength and enhance charging & data transfer speed with up to 480 mb/s transferring speed.|【 Compatibility】-Compatible with iPhone 13, 12,11, X, 8, 7, 6, 5, iPad Air, Pro, Mini & iOS devices.|【 Sturdy & Durable】-The jacket and enforced connector made of TPE and premium copper, are resistant to repeatedly bending and coiling.|【 Ultra High Quality】: According to the experimental results, the fishbone design can accept at least 20,000 bending and insertion tests for extra protection and durability. Upgraded 3D aluminum connector and exclusive laser welding technology, which to ensure the metal part won't break and also have a tighter connection which fits well even with a protective case on and will never loose connection.|【 Good After Sales Service】-Our friendly and reliable customer service will respond to you within 24 hours ! you can purchase with confidence,and every sale includes a 365-day worry-free Service to prove the importance we set on quality.   
3                                                                                                                                                                                                                                                                                                                                                                                                          The boAt Deuce USB 300 2 in 1 cable is compatible with smartphones, tablets, PC peripherals, Bluetooth speakers, power banks and all other devices with Type-C as well as Micro USB port|It ensures 3A fast charging and data transmissions with rapid sync at 480 mbps|The premium Nylon braided skin makes it sturdy and invincible against external damage|Its Aluminium alloy shell housing makes it last longer with 10000+ Bends Lifespan with extended frame protection for strain relief|The resilient and flexible design offers a tangle free experience seamlessly|Deuce USB 300 cable offers a perfect 1.5 meters in length for smooth & hassle-free user experience|2 years warranty from the date of purchase   
his cable comes with charging & Data sync function|[HIGH QUALITY MATERIAL]- TPE + Nylon Material to make sure that the life of the cable is enhanced significantly|[LONG CORD]- The Cable is extra thick 1.2 meter long, optimized for an easy use for your comfort at home or office|[MORE DURABLE]-This cable is unique interms of design and multi-use and is positioned to provide the best comfort and performance while using|[UNIVERSAL COMPATIBILITY]- Compatible with all devices like iPhone XS, X, XR, 8, 7, 6S, 6, 5S, iPad Pro, iPad mini and iPad Air   

                                                                                                                                                                                                                                   user_id  \
0  AG3D6O4STAQKAY2UVGEUV46KN35Q,AHMY5CWJMMK5BJRBBSNLYT3ONILA,AHCTC6ULH4XB6YHDY6PCH2R772LQ,AGYHHIERNXKA6P5T7CZLXKVPT7IQ,AG4OGOFWXJZTQ2HKYIOCOY3KXF2Q,AENGU523SXMOS7JPDTW52PNNVWGQ,AEQJHCVTNINBS4FKTBGQRQTGTE5Q,AFC3FFC5PKFF5PMA52S3VCHOZ5FQ   
1  AECPFYFQVRUWC3KGNLJIOREFP5LQ,AGYYVPDD7YG7FYNBXNGXZJT525AQ,AHONIZU3ICIEHQIGQ6R2VFRSBXOQ,AFPHD2CRPDZMWMBL7WXRSVYWS5JA,AEZ346GX3HJ4O4XNRPHCNHXQURMQ,AEPSWFPNECKO34PUC7I56ITGXR6Q,AHWVEHR5DYLVFTO2KF3IZATFQSWQ,AH4QT33M55677I7ISQOAKEQWACYQ   
2  AGU3BBQ2V2DDAMOAKGFAWDDQ6QHA,AESFLDV2PT363T2AQLWQOWZ4N3OA,AHTPQRIMGUD4BYR5YIHBH3CCGEFQ,AEUVWXYP5LT7PZLLZENEO2NODPBQ,AHC7MPW55DOO6WNCOQVA2VHOD26A,AFDI6FRPFBTNBG7BAEB7JDJSMKDQ,AFQKCEEEKXCOHTDG4WUN3XPPHJQQ,AHKUUFNMBZIDLSSPA4FEHIO2EC7Q   
3  AEWAZDZZJLQUYVOVGBEUKSLXHQ5A,AG5HTSFRRE6NL3M5SGCUQBP7YSCA,AH725ST5NW2Y4JZPKUNTIJCUK2BA,AHV3TXIFCJPMS4D5JATCEUR266MQ,AGWIGDEMFIIUAOXYY2QATNBSUGHA,AFSTSLQUV4EVEXWKBOLEFHL2H5YQ,AGAKDNBHY2FKX7I4ACRGILU7QL7A,AFNWJUWJRHCC6HN52KMG5AKZY37Q   
4  AE3Q6KSUK5P75D5HFYHCRAOLODSA,AFUGIFH5ZAFXRDSZHM4QB2KPKFUQ,AFK4NJOLFSJGWLOJIUIAROJF6YVA,AFUOTYRFUXVPEBGIXVZZ7DR3CZUA,AFDLRSXKDZ6U3U3KD46SQLFGZQRA,AH5VLM66SIK7J3IRG4NY7XVOQ55A,AE3MQNNHHLUHXURL5S7IAR7JTGNQ,AFSEOFZY67MYC7UAJU264Z5NFTLA   

                                                                                   user_name  \
0       Manav,Adarsh gupta,Sundeep,S.Sayeed Ahmed,jaspreet singh,Khaja moin,Anand,S.ARUMUGAM   
1                   ArdKn,Nirbhay kumar,Sagar Viswanathan,Asp,Placeholder,BharanI,sonia,Niam   
2           Kunal,Himanshu,viswanath,sai niharka,saqib malik,Aashiq,Ramu Challa,Sanjay gupta   
3  Omkar dhale,JD,HEMALATHA,Ajwadh a.,amar singh chouhan,Ravi Siddan,Himanshu Goel,Udaykumar   
4       rahuls6099,Swasat Borah,Ajay Wadke,Pranali,RVK,Bhargav,Durai Vignesh,Amazon Customer   

                                                                                                                review_id  \
0   R3HXWT0LRP0NMF,R2AJM3LFTLZHFO,R6AQJGUP6P86,R1KD19VHEDV0OR,R3C02RMYQMK6FC,R39GQRVBUZBWGY,R2K9EDOE15QIRJ,R3OI7YT648TL8I   
1   RGIQEG07R9HS2,R1SMWZQ86XIN8U,R2J3Y1WL29GWDE,RYGGS0M09S3KY,R17KQRUTAN5DKS,R3AAQGS6HP2QUK,R1HDNOG6TO2CCA,R3PHKXYA5AFEOU   
2  R3J3EQQ9TZI5ZJ,R3E7WBGK7ID0KV,RWU79XKQ6I1QF,R25X4TBMPY91LX,R27OK7G99VK0TR,R207CYDCHJJTCJ,R3PCU8XMU173BT,R1IMONDOWRNU5V   
3   R3EEUZKKK9J36I,R3HJVYCLYOY554,REDECAZ7AMPQC,R1CLH2ULIVG5U3,R2DMKIBGFKBD6R,RC89B5IAJUTR5,R3B3DDON5FH8DS,R13WAEJDI5RS36   
4    R1BP4L2HH9TFUP,R16PVJEXKV6QZS,R2UPDB81N66T4P,R3KK4GT934ST3I,RCFHMWUSBIJO,RDO7DACXMAJ84,R3A6MEZL3LY66Z,R1ESIEKPGAYA29   

                                                                                                                                                                            review_title  \
0                                                           Satisfied,Charging is really fast,Value for money,Product review,Good quality,Good product,Good Product,As of now seems good   
1  A Good Braided Cable for Your Type C Device,Good quality product from ambrane,Super cable,As,Good quality,Good product,its good,Good quality for the price but one issue with my unit   
2                                              Good speed for earlier versions,Good Product,Working good,Good for the price,Good,Worth for money,Working nice,it's a really nice product   
3                                           Good product,Good one,Nice,Really nice product,Very first time change,Good,Fine product but could be better,Very nice it's charging like jet   
4                                             As good as original,Decent,Good one for secondary use,Best quality,GOOD,Amazing product at a mind blowing price!,Nice Quality,Good product   

review_content  \
ooks durable Charging is fine tooNo complains,Charging is really fast, good product.,Till now satisfied with the quality.,This is a good product . The charging speed is slower than the original iPhone cable,Good quality, would recommend,https://m.media-amazon.com/images/W/WEBP_402378-T1/images/I/81---F1ZgHL._SY88.jpg,Product had worked well till date and was having no issue.Cable is also sturdy enough...Have asked for replacement and company is doing the same...,Value for money   
ordered this cable to connect my phone to Android Auto of car. The cable is really strong and the connection ports are really well made. I already has a Micro USB cable from Ambrane and it's still in good shape. I connected my phone to the car using the cable and it got connected well and no issues. I also connected it to the charging port and yes it has Fast Charging support.,It quality is good at this price and the main thing is that i didn't ever thought that this cable will be so long it's good one and charging power is too good and also supports fast charging,Value for money, with extra length👍,Good, working fine,Product quality is good,Good,very good,Bought for my daughter's old phone.Brand new cable it was not charging, I already repacked and requested for replacement.I checked again, and there was some green colour paste/fungus inside the micro USB connector. I cleaned with an alcoholic and starts working again.Checked the ampere of charging speed got around 1400ma-1500ma - not bad, came with braided 1.5m long cable, pretty impressive for the price.Can't blame the manufacturer.But quality issues by the distributor, they might have stored in very humid place.   
ot quite durable and sturdy,https://m.media-amazon.com/images/W/WEBP_402378-T1/images/I/71rIggrbUCL._SY88.jpg,Working good,https://m.media-amazon.com/images/W/WEBP_402378-T1/images/I/61bKp9YO6wL._SY88.jpg,Product,Very nice product,Working well,It's a really nice product   
ood product,long wire,Charges good,Nice,I bought this cable for Rs.339 worthy product for this price, i tested it in various charger adapters 33w and 18w it supports fast charging as well.,Good,Ok,I had got this at good price on sale on Amazon and product is useful with warranty but for warranty you need to go very far not practical for such a cost and mine micro to type c connector stopped working after few days only.,I like this product   
4  Bought this instead of original apple, does the work for 150rs, not as fast as apple charger but its a good option if you want cheap and good product, bought it for iPad pro 10.5 and it's working flawlessly, build quality is ok, its not like i am gonna hang my clothes on it and i want a very strong cable, even a braided cable stop working after a year, i have used both Anker and Apple store strong braided cable they all stop working after a year so please don't buy high end cables just for that instead choose a this one and even if it's stops working withing a year you only loose 150rs compares to 2000rs.UPDATE------------------------------------pin has stopped charging from one side, now i have to slip the pin to charge from other side, but i will update and let know for how long does it work,,It’s good. Not sure about durability as the pin area feels a bit fragile,Does not support apple carplaySo was little disappointed about thatOther than that cable is made up of very good quality,Best to buy,100% NOT FATHFUL,Writing this review post 10 months and 3 orders of the same product.Honestly Portronics Konnect L lightning cable works like magic with the original Apple charging brick.Seeing the price of the cable I initially hesitated buying as it was as low as ₹99/- with the offers and so I wasn’t sure if it would work well with my iPhone 12 or whether it would impact my iPhone’s battery health because all the other lightning cable brands were costing over ₹350/- like Wayona, Amazon Basics, etc.Earlier I was using Wayona Brand lightning cable with eventually frayed and stopped working.Charging Speed:Charges my iPhone fast enough almost similar compared to the original cable level when used with 12W Original Apple power adapter.Quality and Durability:Great quality braided cable and doesn’t tangle easily and can withstand day-to-day usage.L-Shaped pin:This is very innovative by Portronics and it makes sure the cable doesn’t get damaged even if used while charging.CarPlay and Data Sync:Works smoothly with CarPlay and syncs data effortlessly.PS: I have used this cable only with the Original Apple Charging Brick and extremely satisfied with its performance.,Better than I expect the product I like that Quality and I plan to buy same type cable come with usb C to Lighting cable for emergency purpose that much I love this cable. Buy for this cable only emergency uses only since Good one,Good product and value for money   

                                                                                                                       product_link  \
0         https://www.amazon.in/Wayona-Braided-WN3LG1-Syncing-Charging/dp/B07JW9H4J1/ref=sr_1_1?qid=1672909124&s=electronics&sr=1-1   
1     https://www.amazon.in/Ambrane-Unbreakable-Charging-Braided-Cable/dp/B098NS6PVG/ref=sr_1_2?qid=1672909124&s=electronics&sr=1-2   
2      https://www.amazon.in/Sounce-iPhone-Charging-Compatible-Devices/dp/B096MSW6CT/ref=sr_1_3?qid=1672909124&s=electronics&sr=1-3   
3   https://www.amazon.in/Deuce-300-Resistant-Tangle-Free-Transmission/dp/B08HDJ86NZ/ref=sr_1_4?qid=1672909124&s=electronics&sr=1-4   
4  https://www.amazon.in/Portronics-Konnect-POR-1080-Charging-Function/dp/B08CF3B7N1/ref=sr_1_5?qid=1672909124&s=electronics&sr=1-5   

                                                     image_url  
0  https://m.media-amazon.com/images/I/71ojkmsYe8L._SX425_.jpg  
1  https://m.media-amazon.com/images/I/61UzQMCRaeL._SX522_.jpg  
2  https://m.media-amazon.com/images/I/31zuK8FlwnL._SX385_.jpg  
3  https://m.media-amazon.com/images/I/61RtLSD47FL._SY450_.jpg  
4  https://m.media-amazon.com/images/I/617IU+aklGL._SX385_.jpg  
Device set to: cpu

[ ]
   1
!pip install seaborn matplotlib
Requirement already satisfied: seaborn in /usr/local/lib/python3.11/dist-packages (0.13.2)
Requirement already satisfied: matplotlib in /usr/local/lib/python3.11/dist-packages (3.10.0)
Requirement already satisfied: numpy!=1.24.0,>=1.20 in /usr/local/lib/python3.11/dist-packages (from seaborn) (1.26.4)
Requirement already satisfied: pandas>=1.2 in /usr/local/lib/python3.11/dist-packages (from seaborn) (2.2.2)
Requirement already satisfied: contourpy>=1.0.1 in /usr/local/lib/python3.11/dist-packages (from matplotlib) (1.3.1)
Requirement already satisfied: cycler>=0.10 in /usr/local/lib/python3.11/dist-packages (from matplotlib) (0.12.1)
Requirement already satisfied: fonttools>=4.22.0 in /usr/local/lib/python3.11/dist-packages (from matplotlib) (4.56.0)
Requirement already satisfied: kiwisolver>=1.3.1 in /usr/local/lib/python3.11/dist-packages (from matplotlib) (1.4.8)
Requirement already satisfied: packaging>=20.0 in /usr/local/lib/python3.11/dist-packages (from matplotlib) (24.2)
Requirement already satisfied: pillow>=8 in /usr/local/lib/python3.11/dist-packages (from matplotlib) (11.1.0)
Requirement already satisfied: pyparsing>=2.3.1 in /usr/local/lib/python3.11/dist-packages (from matplotlib) (3.2.1)
Requirement already satisfied: python-dateutil>=2.7 in /usr/local/lib/python3.11/dist-packages (from matplotlib) (2.8.2)
Requirement already satisfied: pytz>=2020.1 in /usr/local/lib/python3.11/dist-packages (from pandas>=1.2->seaborn) (2025.1)
Requirement already satisfied: tzdata>=2022.7 in /usr/local/lib/python3.11/dist-packages (from pandas>=1.2->seaborn) (2025.1)
Requirement already satisfied: six>=1.5 in /usr/local/lib/python3.11/dist-packages (from python-dateutil>=2.7->matplotlib) (1.17.0)

[ ]
   1
amazon_df.info()
<class 'pandas.core.frame.DataFrame'>
RangeIndex: 1465 entries, 0 to 1464
Data columns (total 16 columns):
 #   Column               Non-Null Count  Dtype 
---  ------               --------------  ----- 
 0   product_id           1465 non-null   object
 1   product_name         1465 non-null   object
 2   category             1465 non-null   object
 3   discounted_price     1465 non-null   object
 4   actual_price         1465 non-null   object
 5   discount_percentage  1465 non-null   object
 6   rating               1465 non-null   object
 7   rating_count         1463 non-null   object
 8   about_product        1465 non-null   object
 9   user_id              1465 non-null   object
 10  user_name            1465 non-null   object
 11  review_id            1465 non-null   object
 12  review_title         1465 non-null   object
 13  review_content       1465 non-null   object
 14  product_link         1465 non-null   object
 15  image_url            1293 non-null   object
dtypes: object(16)
memory usage: 183.3+ KB

[ ]
1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677
import matplotlib.pyplot as plt
import seaborn as sns
import numpy as np

# Preprocess categories
amazon_df['category_hierarchy'] = amazon_df['category'].str.split('|')
amazon_df['main_category'] = amazon_df['category_hierarchy'].apply(lambda x: x[0] if isinstance(x, list) else None)
amazon_df['sub_category'] = amazon_df['category_hierarchy'].apply(lambda x: x[1] if isinstance(x, list) and len(x)>1 else None)

# Analysis 1: Main Category Distribution



[ ]
123456789101112131415161718192021222324252627
# Analysis 6: Price Distribution by Category (USD Conversion)
plt.figure(figsize=(10, 8))

# Clean and convert prices
amazon_df['discounted_price'] = (
    amazon_df['discounted_price']
    .str.replace('[₹,]', '', regex=True)  # Remove both ₹ and commas
    .astype(float)
    / 86  # Conversion rate to USD (adjust if needed)
)


Enhanced Product Analysis Visualizations
1. Price-Rating Density by Category
Price-Rating Density

Purpose: Identify price-quality relationships across categories
Key Insights:
Clustering patterns show premium vs budget segments
Density peaks reveal popular price points per category
Helps spot overpriced/underpriced product groups
2. Top Brands Analysis
Top Brands

Purpose: Identify market leaders and brand concentration
Key Insights:
Dominant brands in product offerings
Market saturation levels
Potential for private label competition
3. Review Content Word Cloud
Word Cloud

Purpose: Surface common product attributes from reviews
Key Insights:
Most frequently mentioned features
Customer satisfaction drivers
Quality-related keywords prevalence
4. Price-Quality Matrix
Price-Quality Matrix

Purpose: Strategic product positioning analysis
Key Insights:
Premium vs value product clusters
Relationship between discounts and ratings
Popular products (bubble size = rating count)
5. Feature Importance Analysis
Feature Importance

Purpose: Identify key rating drivers
Key Insights:
Most influential factors on product ratings
Relative importance of price vs discounts
Impact of review volume on perceived quality
Key Cross-Analysis Observations
Price Sensitivity:

Electronics show tight price-quality correlation
Office products have wide price variation with similar ratings
Brand Influence:

Top 3 brands account for 40% of products
Brand concentration varies significantly by category
Review Themes:

"Durability" and "Performance" are most mentioned
Shipping experience appears as common secondary theme
Quality Drivers:

Rating count (popularity) has strongest correlation with ratings
Discount percentage shows weak negative correlation with quality

[ ]
1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950
# Price vs. Rating Density Plot (with Category Overlay)
# Convert rating to numeric first
amazon_df['rating'] = pd.to_numeric(amazon_df['rating'], errors='coerce')

plt.figure(figsize=(12, 8))
sns.kdeplot(
    data=amazon_df.dropna(subset=['rating']),
    x='discounted_price',
    y='rating',
    hue='main_category',



[ ]
   1
pip install --upgrade matplotlib
Requirement already satisfied: matplotlib in /usr/local/lib/python3.11/dist-packages (3.10.0)
Requirement already satisfied: contourpy>=1.0.1 in /usr/local/lib/python3.11/dist-packages (from matplotlib) (1.3.1)
Requirement already satisfied: cycler>=0.10 in /usr/local/lib/python3.11/dist-packages (from matplotlib) (0.12.1)
Requirement already satisfied: fonttools>=4.22.0 in /usr/local/lib/python3.11/dist-packages (from matplotlib) (4.56.0)
Requirement already satisfied: kiwisolver>=1.3.1 in /usr/local/lib/python3.11/dist-packages (from matplotlib) (1.4.8)
Requirement already satisfied: numpy>=1.23 in /usr/local/lib/python3.11/dist-packages (from matplotlib) (1.26.4)
Requirement already satisfied: packaging>=20.0 in /usr/local/lib/python3.11/dist-packages (from matplotlib) (24.2)
Requirement already satisfied: pillow>=8 in /usr/local/lib/python3.11/dist-packages (from matplotlib) (11.1.0)
Requirement already satisfied: pyparsing>=2.3.1 in /usr/local/lib/python3.11/dist-packages (from matplotlib) (3.2.1)
Requirement already satisfied: python-dateutil>=2.7 in /usr/local/lib/python3.11/dist-packages (from matplotlib) (2.8.2)
Requirement already satisfied: six>=1.5 in /usr/local/lib/python3.11/dist-packages (from python-dateutil>=2.7->matplotlib) (1.17.0)

[ ]
   1
   2
   3
   4
import matplotlib
print(f"Matplotlib version: {matplotlib.__version__}")
import seaborn as sns
print(f"Seaborn version: {sns.__version__}")
Matplotlib version: 3.10.0
Seaborn version: 0.13.2

[ ]
    1
    2
    3
    4
    5
    6
    7
    8
    9
   10
   11
   12
   13
   14
   15
   16
   17
   18
   19
   20
   21
   22
   23
   24
   25
   26
   27
   28
   29
   30
   31
   32
   33
   34
   35
   36
   37
   38
   39
   40
   41
   42
   43
   44
   45
   46
   47
   48
   49
   50
   51
   52
   53
   54
   55
   56
   57
   58
   59
   60
   61
   62
   63
   64
   65
   66
   67
   68
   69
   70
   71
   72
   73
   74
   75
   76
   77
   78
   79
   80
   81
   82
   83
   84
   85
   86
   87
   88
   89
   90
   91
   92
   93
   94
   95
   96
   97
   98
   99
  100
  101
  102
  103
  104
  105
  106
  107
  108
  109
  110
  111
  112
  113
  114
  115
  116
  117
  118
  119
  120
  121
  122
  123
  124
  125
  126
  127
  128
  129
  130
  131
  132
  133
  134
  135
  136
  137
  138
  139
  140
  141
  142
  143
  144
  145
  146
  147
  148
  149
  150
  151
  152
  153
  154
  155
  156
  157
# Price-Quality Quadrant Analysis
import matplotlib.pyplot as plt
import seaborn as sns
import numpy as np

# Clean numeric columns
numeric_cols = ['discounted_price', 'actual_price', 'discount_percentage', 'rating', 'rating_count']

for col in numeric_cols:
    amazon_df[col] = amazon_df[col].astype(str)
    amazon_df[col] = (
        amazon_df[col]
        .str.replace('[₹$,%]', '', regex=True)
        .str.replace(',', '')
        .astype(float)
    )

fig, ax = plt.subplots(figsize=(12, 8))  # Create figure and axes explicitly

# Create the scatter plot with specific axes
scatter = sns.scatterplot(
    x='discounted_price',
    y='rating',
    size='rating_count',
    hue='discount_percentage',
    data=amazon_df,
    palette='viridis',
    alpha=0.7,
    sizes=(20, 200),
    legend=False,
    ax=ax  # Pass the axes explicitly
)

# Function to format legend labels
def format_legend_label(value):
    if value >= 1e6:
        return f'{value/1e6:.1f}M'
    elif value >= 1e3:
        return f'{value/1e3:.0f}K'
    else:
        return f'{value:.0f}'

# Create manually defined size values for the legend
min_count = amazon_df['rating_count'].min()
max_count = amazon_df['rating_count'].max()

if max_count > 1000:
    size_values = [100, 1000, 10000, 100000]
    size_values = [s for s in size_values if min_count <= s <= max_count]
    if not size_values:
        size_values = [
            min_count,
            min(max_count, min_count * 10),
            min(max_count, min_count * 100)
        ]
else:
    size_values = [
        min_count,
        min_count + (max_count - min_count) * 0.33,
        min_count + (max_count - min_count) * 0.67,
        max_count
    ]

# Size mapping function
def map_size_to_point_size(value, min_val, max_val, min_size=20, max_size=200):
    if max_val == min_val:
        return min_size
    normalized = (value - min_val) / (max_val - min_val)
    return min_size + normalized * (max_size - min_size)

# Create dummy scatter points for the legend
size_handles = [
    plt.scatter([], [],
                s=map_size_to_point_size(s, min_count, max_count),
                color='gray', alpha=0.7)
    for s in size_values
]

# Format the labels
size_labels = [format_legend_label(s) for s in size_values]

# Add custom legend for SIZE
size_legend = ax.legend(
    size_handles,
    size_labels,
    title='Rating Count',
    bbox_to_anchor=(1.15, 1),
    loc='upper left',
    frameon=False
)
ax.add_artist(size_legend)  # Add size legend to plot

# Add colorbar for HUE (discount_percentage)
norm = plt.Normalize(
    amazon_df['discount_percentage'].min(),
    amazon_df['discount_percentage'].max()
)
sm = plt.cm.ScalarMappable(cmap='viridis', norm=norm)
sm.set_array([])
plt.colorbar(sm, ax=ax, label='Discount Percentage (%)')  # Pass ax to colorbar

# Add quadrant lines based on medians
median_price = amazon_df['discounted_price'].median()
median_rating = amazon_df['rating'].median()

ax.axvline(x=median_price, color='gray', linestyle='--', alpha=0.5)
ax.axhline(y=median_rating, color='gray', linestyle='--', alpha=0.5)

# Get current axis limits
x_min, x_max = ax.get_xlim()
y_min, y_max = ax.get_ylim()

# Calculate positions for quadrant labels
high_x = median_price + (x_max - median_price) * 0.6
low_x = median_price - (median_price - x_min) * 0.6
high_y = median_rating + (y_max - median_rating) * 0.6
low_y = median_rating - (median_rating - y_min) * 0.6

# Add quadrant labels with white background
ax.text(high_x, high_y, 'Premium', fontsize=12,
       bbox=dict(facecolor='white', alpha=0.7, edgecolor='none', pad=3))
ax.text(low_x, high_y, 'High Value', fontsize=12,
       bbox=dict(facecolor='white', alpha=0.7, edgecolor='none', pad=3))
ax.text(high_x, low_y, 'Overpriced', fontsize=12,
       bbox=dict(facecolor='white', alpha=0.7, edgecolor='none', pad=3))
ax.text(low_x, low_y, 'Budget', fontsize=12,
       bbox=dict(facecolor='white', alpha=0.7, edgecolor='none', pad=3))

# Count products in each quadrant
q1_count = ((amazon_df['discounted_price'] >= median_price) &
            (amazon_df['rating'] >= median_rating)).sum()
q2_count = ((amazon_df['discounted_price'] < median_price) &
            (amazon_df['rating'] >= median_rating)).sum()
q3_count = ((amazon_df['discounted_price'] >= median_price) &
            (amazon_df['rating'] < median_rating)).sum()
q4_count = ((amazon_df['discounted_price'] < median_price) &
            (amazon_df['rating'] < median_rating)).sum()

# Add counts to the plot using fig instead of plt
fig.text(0.80, 0.03, f"Premium: {q1_count}", fontsize=9)
fig.text(0.20, 0.03, f"High Value: {q2_count}", fontsize=9)
fig.text(0.80, 0.01, f"Overpriced: {q3_count}", fontsize=9)
fig.text(0.20, 0.01, f"Budget: {q4_count}", fontsize=9)

ax.set_title('Price-Quality Matrix with Popularity Indicators', fontsize=14)
ax.set_xlabel('Price (USD)', fontsize=12)
ax.set_ylabel('Rating', fontsize=12)
ax.grid(True, alpha=0.3)
plt.tight_layout()
plt.show()

# Print quadrant statistics
print("\nQuadrant Analysis:")
print(f"Premium Products (high price, high rating): {q1_count} products")
print(f"High Value Products (low price, high rating): {q2_count} products")
print(f"Overpriced Products (high price, low rating): {q3_count} products")
print(f"Budget Products (low price, low rating): {q4_count} products")

Feature Importance Analysis using RandomForestRegressor
RandomForestRegressor - a traditional machine learning model that's excellent for:
Measuring feature importance without needing extensive training
Handling non-linear relationships between variables
Working well on small-to-medium datasets
Providing reliable importance scores without overfitting

[ ]
123456789101112131415161718192021222324252627282930313233343536
# Feature Importance Analysis
from sklearn.ensemble import RandomForestRegressor

# Check where NaN values are in the data
print("NaN counts in X:")
print(X.isna().sum())
print("\nNaN counts in y:")
print(y.isna().sum())

# Remove rows with NaN values in either X or y



[ ]
   1
   2
   3
   4
   5
   6
   7
   8
   9
  10
  11
  12
  13
  14
  15
  16
  17
  18
  19
  20
  21
  22
  23
  24
  25
  26
  27
  28
  29
  30
  31
  32
  33
  34
  35
  36
  37
  38
  39
  40
  41
  42
  43
  44
  45
  46
  47
  48
  49
  50
  51
  52
  53
  54
  55
  56
from sklearn.ensemble import RandomForestRegressor
from sklearn.preprocessing import OneHotEncoder
from sklearn.feature_extraction.text import TfidfVectorizer
import numpy as np
import pandas as pd

# Ensure numeric columns are properly converted
numeric_cols = ['discounted_price', 'actual_price', 'discount_percentage', 'rating_count']
for col in numeric_cols:
    amazon_df[col] = pd.to_numeric(amazon_df[col].astype(str).str.replace('[₹$,%]', '', regex=True).str.replace(',', ''), errors='coerce')

# Target variable
y = pd.to_numeric(amazon_df['rating'], errors='coerce')
valid_indices = ~y.isna()
y_clean = y[valid_indices]

# 1. Process numeric features
X_numeric = amazon_df[numeric_cols].fillna(0)[valid_indices]

# 2. Process categorical features
categorical_features = ['category']
encoder = OneHotEncoder(sparse_output=False, handle_unknown='ignore')
X_categorical = encoder.fit_transform(amazon_df[categorical_features].fillna('Unknown')[valid_indices])
categorical_feature_names = encoder.get_feature_names_out(categorical_features)

# 3. Process text features (simplified - using only about_product)
# Limit features to control dimensionality
text_vectorizer = TfidfVectorizer(max_features=50, stop_words='english')
X_text = text_vectorizer.fit_transform(amazon_df['about_product'].fillna('')[valid_indices]).toarray()
text_feature_names = text_vectorizer.get_feature_names_out()

# Combine all features
X_combined = np.hstack([X_numeric, X_categorical, X_text])
all_feature_names = list(numeric_cols) + list(categorical_feature_names) + list(text_feature_names)

# Train model
model = RandomForestRegressor(random_state=42, n_estimators=100)
model.fit(X_combined, y_clean)

# Get top 20 features
importances = model.feature_importances_
indices = np.argsort(importances)[-20:]  # Get indices of top 20 features

# Plot
plt.figure(figsize=(12, 10))
plt.barh(range(len(indices)), importances[indices], align='center')
plt.yticks(range(len(indices)), [all_feature_names[i] for i in indices])
plt.title('Top 20 Features Influencing Product Rating')
plt.xlabel('Importance Score')
plt.tight_layout()
plt.show()

# Print top features
print("Top 20 features by importance:")
for i in indices[::-1]:
    print(f"{all_feature_names[i]}: {importances[i]:.4f}")


[ ]
   1

Colab paid products - Cancel contracts here

from google.colab import drive
drive.mount('/content/drive', force_remount=True)

import os
import pandas as pd
import sys
from pathlib import Path

# Add project root directory to sys.path
project_root = Path("/content/drive/My Drive/E-commerce_Analysis")
if str(project_root) not in sys.path:
    sys.path.insert(0, str(project_root))

print("Python path updated:")
print(sys.path[:5])

# Set display option for long text
pd.set_option('display.max_colwidth', None)

# Define the file path to your Amazon dataset with images
amazon_data_path = "/content/drive/My Drive/E-commerce_Analysis/data/raw/amazon_with_images.csv"

# Verify file existence
if os.path.exists(amazon_data_path):
    print("Amazon dataset with images found!")
else:
    print("Amazon dataset with images not found. Check the file path.")

# Load the dataset
amazon_df = pd.read_csv(amazon_data_path)
print("Amazon Sales Dataset Columns:")
print(amazon_df.columns.tolist())

print("\nSample data:")
print(amazon_df.head())

# Set device explicitly
device = "cpu"
print(f"Device set to: {device}")

!pip install seaborn matplotlib
amazon_df.info()




import matplotlib.pyplot as plt
import seaborn as sns
import numpy as np

# Preprocess categories
amazon_df['category_hierarchy'] = amazon_df['category'].str.split('|')
amazon_df['main_category'] = amazon_df['category_hierarchy'].apply(lambda x: x[0] if isinstance(x, list) else None)
amazon_df['sub_category'] = amazon_df['category_hierarchy'].apply(lambda x: x[1] if isinstance(x, list) and len(x)>1 else None)

# Analysis 1: Main Category Distribution
main_category_counts = amazon_df['main_category'].value_counts()

plt.figure(figsize=(12, 6))
sns.barplot(x=main_category_counts.values, y=main_category_counts.index, palette='viridis')
plt.title('Product Distribution by Main Category')
plt.xlabel('Number of Products')
plt.ylabel('Main Category')
plt.show()

# Analysis 2: Sub-Category Distribution
sub_category_counts = amazon_df['sub_category'].value_counts()

plt.figure(figsize=(12, 8))
sns.barplot(x=sub_category_counts.values, y=sub_category_counts.index, palette='magma')
plt.title('Product Distribution by Sub-Category')
plt.xlabel('Number of Products')
plt.ylabel('Sub-Category')
plt.show()

# Analysis 3: Hierarchical Category View
hierarchical_counts = amazon_df.groupby(['main_category', 'sub_category']).size().reset_index(name='counts')
hierarchical_counts = hierarchical_counts.sort_values('counts', ascending=False)

plt.figure(figsize=(14, 8))
sns.barplot(x='counts', y='main_category', hue='sub_category', data=hierarchical_counts, dodge=False,
            palette='tab20')
plt.title('Product Distribution by Category Hierarchy')
plt.xlabel('Number of Products')
plt.ylabel('Main Category')
plt.legend(bbox_to_anchor=(1.05, 1), loc='upper left')
plt.show()

# Analysis 4: Ratings Distribution
plt.figure(figsize=(10, 6))
sns.histplot(amazon_df['rating'], bins=20, kde=True)
plt.title('Distribution of Product Ratings')
plt.xlabel('Rating')
plt.ylabel('Count')
plt.show()

# Analysis 5: Discount Analysis
# Clean percentage values and convert to float
amazon_df['discount_percentage'] = (
    amazon_df['discount_percentage']
    .astype(str)  # Convert to string first
    .str.replace('%', '', regex=False)  # Remove percentage signs
    .str.strip()  # Remove whitespace
    .replace('', np.nan)  # Handle empty strings
    .astype(float)  # Convert to float
)

plt.figure(figsize=(12, 6))  # Increase figure width
ax = sns.scatterplot(x='discount_percentage', y='rating',
                    data=amazon_df,
                    alpha=0.6,
                    hue='main_category',
                    palette='viridis')

# Move legend to right side outside plot
plt.legend(bbox_to_anchor=(1.05, 1), loc='upper left', borderaxespad=0)

plt.title('Discount Percentage vs Product Rating')
plt.xlabel('Discount Percentage (%)')
plt.ylabel('Rating')
plt.tight_layout()  # Adjust layout to make room for legend
plt.show()


# Analysis 6: Price Distribution by Category (USD Conversion)
plt.figure(figsize=(10, 8))

# Clean and convert prices
amazon_df['discounted_price'] = (
    amazon_df['discounted_price']
    .str.replace('[₹,]', '', regex=True)  # Remove both ₹ and commas
    .astype(float)
    / 86  # Conversion rate to USD (adjust if needed)
)

# Filter data
filtered_df = amazon_df[amazon_df['main_category'].isin(main_category_counts.index[:5])]

# Create plot
sns.boxplot(
    y='main_category',
    x='discounted_price',
    data=filtered_df,
    orient='h'
)

plt.title('Discounted Price Distribution by Main Category (USD)')
plt.ylabel('Main Category')
plt.xlabel('Discounted Price (USD)')
plt.tight_layout()
plt.show()



Skip to main content
05_data_exploration_amazon_dataset.ipynb
05_data_exploration_amazon_dataset.ipynbC_
Amazon Product Data Analysis
Dataset Overview
Contains product listings from various categories with pricing, ratings, and review information
Key columns: product_id, product_name, category, discounted_price, actual_price, rating, review_content
Total records: [Add your dataset size here]
Category Analysis
1. Main Category Distribution
Main Categories

Visualization: Horizontal bar chart showing product count per main category
Key Insights:
Computers & Accessories dominates the dataset
Electronics/Home Theater is second largest category
Helps identify focus areas for inventory management
2. Sub-Category Distribution
Sub Categories

Visualization: Horizontal bar chart showing product count per sub-category
Key Insights:
Cables & Accessories is most populated sub-category
USBCables and WirelessUSBAdapters are prominent
Helps understand product type distribution
3. Category Hierarchy
Hierarchical View

Visualization: Stacked bar chart showing main-sub category relationships
Key Insights:
Computers&Accessories > Cables&Accessories has maximum products
Helps see category-subcategory relationships at glance
Rating Analysis
Ratings Distribution

Visualization: Histogram with KDE showing rating distribution
Key Insights:
Most products have ratings between 4.0-4.5
Few products have ratings below 3.5
Helps identify quality trends
Pricing Analysis
Price Distribution

Visualization: Box plots showing price distribution across categories
Key Insights:
Smart TVs show widest price range
Cables & Accessories have most consistent pricing
Helps understand market segments
Discount Analysis
Discount vs Rating

Visualization: Scatter plot showing discount percentage vs ratings
Key Insights:
Higher discounts (>70%) tend to have slightly lower ratings
Best rated products (4.5+) have moderate discounts (30-50%)
Helps evaluate discount strategies
Key Observations
Category Concentration:

60% of products belong to Computers & Accessories
Cables constitute 45% of all listed products
Pricing Patterns:

Smart TVs range from ₹11,499 to ₹32,999
Most cables priced under ₹500
Quality Signals:

Average rating: 4.1/5
Top-rated categories: Networking Devices (4.3), Smart TVs (4.2)
Discount Strategy:

Maximum discount observed: 90%
Average discount: 52%
Next Steps
Investigate why high-discount products have lower ratings
Analyze review content for quality insights
Compare pricing strategies across sub-categories
Explore relationships between rating counts and product popularity

[ ]
123456789101112131415161718192021222324252627282930313233343536373839
from google.colab import drive
drive.mount('/content/drive', force_remount=True)

import os
import pandas as pd
import sys
from pathlib import Path

# Add project root directory to sys.path
project_root = Path("/content/drive/My Drive/E-commerce_Analysis")
…print("Amazon Sales Dataset Columns:")
print(amazon_df.columns.tolist())

print("\nSample data:")
print(amazon_df.head())

# Set device explicitly
device = "cpu"
print(f"Device set to: {device}")
Mounted at /content/drive
Python path updated:
['/content/drive/My Drive/E-commerce_Analysis', '/content', '/env/python', '/usr/lib/python311.zip', '/usr/lib/python3.11']
Amazon dataset with images found!
Amazon Sales Dataset Columns:
['product_id', 'product_name', 'category', 'discounted_price', 'actual_price', 'discount_percentage', 'rating', 'rating_count', 'about_product', 'user_id', 'user_name', 'review_id', 'review_title', 'review_content', 'product_link', 'image_url']

Sample data:
   product_id  \
0  B07JW9H4J1   
1  B098NS6PVG   
2  B096MSW6CT   
3  B08HDJ86NZ   
4  B08CF3B7N1   

                                                                                                                                                                                              product_name  \
0                                       Wayona Nylon Braided USB to Lightning Fast Charging and Data Sync Cable Compatible for iPhone 13, 12,11, X, 8, 7, 6, 5, iPad Air, Pro, Mini (3 FT Pack of 1, Grey)   
1        Ambrane Unbreakable 60W / 3A Fast Charging 1.5m Braided Type C Cable for Smartphones, Tablets, Laptops & other Type C devices, PD Technology, 480Mbps Data Sync, Quick Charge 3.0 (RCT15A, Black)   
2                                                                 Sounce Fast Phone Charging Cable & Data Sync USB Cable Compatible for iPhone 13, 12,11, X, 8, 7, 6, 5, iPad Air, Pro, Mini & iOS Devices   
3  boAt Deuce USB 300 2 in 1 Type-C & Micro USB Stress Resistant, Tangle-Free, Sturdy Cable with 3A Fast Charging & 480mbps Data Transmission, 10000+ Bends Lifespan and Extended 1.5m Length(Martian Red)   
4                                                                                           Portronics Konnect L 1.2M Fast Charging 3A 8 Pin USB Cable with Charge & Sync Function for iPhone, iPad (Grey)   

                                                                            category  \
0  Computers&Accessories|Accessories&Peripherals|Cables&Accessories|Cables|USBCables   
1  Computers&Accessories|Accessories&Peripherals|Cables&Accessories|Cables|USBCables   
2  Computers&Accessories|Accessories&Peripherals|Cables&Accessories|Cables|USBCables   
3  Computers&Accessories|Accessories&Peripherals|Cables&Accessories|Cables|USBCables   
4  Computers&Accessories|Accessories&Peripherals|Cables&Accessories|Cables|USBCables   

  discounted_price actual_price discount_percentage rating rating_count  \
0             ₹399       ₹1,099                 64%    4.2       24,269   
1             ₹199         ₹349                 43%      4       43,994   
2             ₹199       ₹1,899                 90%    3.9        7,928   
3             ₹329         ₹699                 53%    4.2       94,363   
4             ₹154         ₹399                 61%    4.2       16,905   

about_product  \
0                                                                                                                                     High Compatibility : Compatible With iPhone 12, 11, X/XsMax/Xr ,iPhone 8/8 Plus,iPhone 7/7 Plus,iPhone 6s/6s Plus,iPhone 6/6 Plus,iPhone 5/5s/5c/se,iPad Pro,iPad Air 1/2,iPad mini 1/2/3,iPod nano7,iPod touch and more apple devices.|Fast Charge&Data Sync : It can charge and sync simultaneously at a rapid speed, Compatible with any charging adaptor, multi-port charging station or power bank.|Durability : Durable nylon braided design with premium aluminum housing and toughened nylon fiber wound tightly around the cord lending it superior durability and adding a bit to its flexibility.|High Security Level : It is designed to fully protect your device from damaging excessive current.Copper core thick+Multilayer shielding, Anti-interference, Protective circuit equipment.|WARRANTY: 12 months warranty and friendly customer services, ensures the long-time enjoyment of your purchase. If you meet any question or problem, please don't hesitate to contact us.   
1                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        Compatible with all Type C enabled devices, be it an android smartphone (Mi, Samsung, Oppo, Vivo, Realme, OnePlus, etc), tablet, laptop (Macbook, Chromebook, etc)|Supports Quick Charging (2.0/3.0)|Unbreakable – Made of special braided outer with rugged interior bindings, it is ultra-durable cable that won’t be affected by daily rough usage|Ideal Length – It has ideal length of 1.5 meters which is neither too short like your typical 1meter cable or too long like a 2meters cable|Supports maximum 3A fast charging and 480 Mbps data transfer speed|6 months manufacturer warranty from the date of purchase   
2  【 Fast Charger& Data Sync】-With built-in safety proctections and four-core copper wires promote maximum signal quality and strength and enhance charging & data transfer speed with up to 480 mb/s transferring speed.|【 Compatibility】-Compatible with iPhone 13, 12,11, X, 8, 7, 6, 5, iPad Air, Pro, Mini & iOS devices.|【 Sturdy & Durable】-The jacket and enforced connector made of TPE and premium copper, are resistant to repeatedly bending and coiling.|【 Ultra High Quality】: According to the experimental results, the fishbone design can accept at least 20,000 bending and insertion tests for extra protection and durability. Upgraded 3D aluminum connector and exclusive laser welding technology, which to ensure the metal part won't break and also have a tighter connection which fits well even with a protective case on and will never loose connection.|【 Good After Sales Service】-Our friendly and reliable customer service will respond to you within 24 hours ! you can purchase with confidence,and every sale includes a 365-day worry-free Service to prove the importance we set on quality.   
3                                                                                                                                                                                                                                                                                                                                                                                                          The boAt Deuce USB 300 2 in 1 cable is compatible with smartphones, tablets, PC peripherals, Bluetooth speakers, power banks and all other devices with Type-C as well as Micro USB port|It ensures 3A fast charging and data transmissions with rapid sync at 480 mbps|The premium Nylon braided skin makes it sturdy and invincible against external damage|Its Aluminium alloy shell housing makes it last longer with 10000+ Bends Lifespan with extended frame protection for strain relief|The resilient and flexible design offers a tangle free experience seamlessly|Deuce USB 300 cable offers a perfect 1.5 meters in length for smooth & hassle-free user experience|2 years warranty from the date of purchase   
4                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       [CHARGE & SYNC FUNCTION]- This cable comes with charging & Data sync function|[HIGH QUALITY MATERIAL]- TPE + Nylon Material to make sure that the life of the cable is enhanced significantly|[LONG CORD]- The Cable is extra thick 1.2 meter long, optimized for an easy use for your comfort at home or office|[MORE DURABLE]-This cable is unique interms of design and multi-use and is positioned to provide the best comfort and performance while using|[UNIVERSAL COMPATIBILITY]- Compatible with all devices like iPhone XS, X, XR, 8, 7, 6S, 6, 5S, iPad Pro, iPad mini and iPad Air   

                                                                                                                                                                                                                                   user_id  \
0  AG3D6O4STAQKAY2UVGEUV46KN35Q,AHMY5CWJMMK5BJRBBSNLYT3ONILA,AHCTC6ULH4XB6YHDY6PCH2R772LQ,AGYHHIERNXKA6P5T7CZLXKVPT7IQ,AG4OGOFWXJZTQ2HKYIOCOY3KXF2Q,AENGU523SXMOS7JPDTW52PNNVWGQ,AEQJHCVTNINBS4FKTBGQRQTGTE5Q,AFC3FFC5PKFF5PMA52S3VCHOZ5FQ   
1  AECPFYFQVRUWC3KGNLJIOREFP5LQ,AGYYVPDD7YG7FYNBXNGXZJT525AQ,AHONIZU3ICIEHQIGQ6R2VFRSBXOQ,AFPHD2CRPDZMWMBL7WXRSVYWS5JA,AEZ346GX3HJ4O4XNRPHCNHXQURMQ,AEPSWFPNECKO34PUC7I56ITGXR6Q,AHWVEHR5DYLVFTO2KF3IZATFQSWQ,AH4QT33M55677I7ISQOAKEQWACYQ   
2  AGU3BBQ2V2DDAMOAKGFAWDDQ6QHA,AESFLDV2PT363T2AQLWQOWZ4N3OA,AHTPQRIMGUD4BYR5YIHBH3CCGEFQ,AEUVWXYP5LT7PZLLZENEO2NODPBQ,AHC7MPW55DOO6WNCOQVA2VHOD26A,AFDI6FRPFBTNBG7BAEB7JDJSMKDQ,AFQKCEEEKXCOHTDG4WUN3XPPHJQQ,AHKUUFNMBZIDLSSPA4FEHIO2EC7Q   
3  AEWAZDZZJLQUYVOVGBEUKSLXHQ5A,AG5HTSFRRE6NL3M5SGCUQBP7YSCA,AH725ST5NW2Y4JZPKUNTIJCUK2BA,AHV3TXIFCJPMS4D5JATCEUR266MQ,AGWIGDEMFIIUAOXYY2QATNBSUGHA,AFSTSLQUV4EVEXWKBOLEFHL2H5YQ,AGAKDNBHY2FKX7I4ACRGILU7QL7A,AFNWJUWJRHCC6HN52KMG5AKZY37Q   
4  AE3Q6KSUK5P75D5HFYHCRAOLODSA,AFUGIFH5ZAFXRDSZHM4QB2KPKFUQ,AFK4NJOLFSJGWLOJIUIAROJF6YVA,AFUOTYRFUXVPEBGIXVZZ7DR3CZUA,AFDLRSXKDZ6U3U3KD46SQLFGZQRA,AH5VLM66SIK7J3IRG4NY7XVOQ55A,AE3MQNNHHLUHXURL5S7IAR7JTGNQ,AFSEOFZY67MYC7UAJU264Z5NFTLA   

                                                                                   user_name  \
0       Manav,Adarsh gupta,Sundeep,S.Sayeed Ahmed,jaspreet singh,Khaja moin,Anand,S.ARUMUGAM   
1                   ArdKn,Nirbhay kumar,Sagar Viswanathan,Asp,Placeholder,BharanI,sonia,Niam   
2           Kunal,Himanshu,viswanath,sai niharka,saqib malik,Aashiq,Ramu Challa,Sanjay gupta   
3  Omkar dhale,JD,HEMALATHA,Ajwadh a.,amar singh chouhan,Ravi Siddan,Himanshu Goel,Udaykumar   
4       rahuls6099,Swasat Borah,Ajay Wadke,Pranali,RVK,Bhargav,Durai Vignesh,Amazon Customer   

                                                                                                                review_id  \
0   R3HXWT0LRP0NMF,R2AJM3LFTLZHFO,R6AQJGUP6P86,R1KD19VHEDV0OR,R3C02RMYQMK6FC,R39GQRVBUZBWGY,R2K9EDOE15QIRJ,R3OI7YT648TL8I   
1   RGIQEG07R9HS2,R1SMWZQ86XIN8U,R2J3Y1WL29GWDE,RYGGS0M09S3KY,R17KQRUTAN5DKS,R3AAQGS6HP2QUK,R1HDNOG6TO2CCA,R3PHKXYA5AFEOU   
2  R3J3EQQ9TZI5ZJ,R3E7WBGK7ID0KV,RWU79XKQ6I1QF,R25X4TBMPY91LX,R27OK7G99VK0TR,R207CYDCHJJTCJ,R3PCU8XMU173BT,R1IMONDOWRNU5V   
3   R3EEUZKKK9J36I,R3HJVYCLYOY554,REDECAZ7AMPQC,R1CLH2ULIVG5U3,R2DMKIBGFKBD6R,RC89B5IAJUTR5,R3B3DDON5FH8DS,R13WAEJDI5RS36   
4    R1BP4L2HH9TFUP,R16PVJEXKV6QZS,R2UPDB81N66T4P,R3KK4GT934ST3I,RCFHMWUSBIJO,RDO7DACXMAJ84,R3A6MEZL3LY66Z,R1ESIEKPGAYA29   

                                                                                                                                                                            review_title  \
0                                                           Satisfied,Charging is really fast,Value for money,Product review,Good quality,Good product,Good Product,As of now seems good   
1  A Good Braided Cable for Your Type C Device,Good quality product from ambrane,Super cable,As,Good quality,Good product,its good,Good quality for the price but one issue with my unit   
2                                              Good speed for earlier versions,Good Product,Working good,Good for the price,Good,Worth for money,Working nice,it's a really nice product   
3                                           Good product,Good one,Nice,Really nice product,Very first time change,Good,Fine product but could be better,Very nice it's charging like jet   
4                                             As good as original,Decent,Good one for secondary use,Best quality,GOOD,Amazing product at a mind blowing price!,Nice Quality,Good product   

review_content  \
ooks durable Charging is fine tooNo complains,Charging is really fast, good product.,Till now satisfied with the quality.,This is a good product . The charging speed is slower than the original iPhone cable,Good quality, would recommend,https://m.media-amazon.com/images/W/WEBP_402378-T1/images/I/81---F1ZgHL._SY88.jpg,Product had worked well till date and was having no issue.Cable is also sturdy enough...Have asked for replacement and company is doing the same...,Value for money   
ordered this cable to connect my phone to Android Auto of car. The cable is really strong and the connection ports are really well made. I already has a Micro USB cable from Ambrane and it's still in good shape. I connected my phone to the car using the cable and it got connected well and no issues. I also connected it to the charging port and yes it has Fast Charging support.,It quality is good at this price and the main thing is that i didn't ever thought that this cable will be so long it's good one and charging power is too good and also supports fast charging,Value for money, with extra length👍,Good, working fine,Product quality is good,Good,very good,Bought for my daughter's old phone.Brand new cable it was not charging, I already repacked and requested for replacement.I checked again, and there was some green colour paste/fungus inside the micro USB connector. I cleaned with an alcoholic and starts working again.Checked the ampere of charging speed got around 1400ma-1500ma - not bad, came with braided 1.5m long cable, pretty impressive for the price.Can't blame the manufacturer.But quality issues by the distributor, they might have stored in very humid place.   
ot quite durable and sturdy,https://m.media-amazon.com/images/W/WEBP_402378-T1/images/I/71rIggrbUCL._SY88.jpg,Working good,https://m.media-amazon.com/images/W/WEBP_402378-T1/images/I/61bKp9YO6wL._SY88.jpg,Product,Very nice product,Working well,It's a really nice product   
3                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          Good product,long wire,Charges good,Nice,I bought this cable for Rs.339 worthy product for this price, i tested it in various charger adapters 33w and 18w it supports fast charging as well.,Good,Ok,I had got this at good price on sale on Amazon and product is useful with warranty but for warranty you need to go very far not practical for such a cost and mine micro to type c connector stopped working after few days only.,I like this product   
4  Bought this instead of original apple, does the work for 150rs, not as fast as apple charger but its a good option if you want cheap and good product, bought it for iPad pro 10.5 and it's working flawlessly, build quality is ok, its not like i am gonna hang my clothes on it and i want a very strong cable, even a braided cable stop working after a year, i have used both Anker and Apple store strong braided cable they all stop working after a year so please don't buy high end cables just for that instead choose a this one and even if it's stops working withing a year you only loose 150rs compares to 2000rs.UPDATE------------------------------------pin has stopped charging from one side, now i have to slip the pin to charge from other side, but i will update and let know for how long does it work,,It’s good. Not sure about durability as the pin area feels a bit fragile,Does not support apple carplaySo was little disappointed about thatOther than that cable is made up of very good quality,Best to buy,100% NOT FATHFUL,Writing this review post 10 months and 3 orders of the same product.Honestly Portronics Konnect L lightning cable works like magic with the original Apple charging brick.Seeing the price of the cable I initially hesitated buying as it was as low as ₹99/- with the offers and so I wasn’t sure if it would work well with my iPhone 12 or whether it would impact my iPhone’s battery health because all the other lightning cable brands were costing over ₹350/- like Wayona, Amazon Basics, etc.Earlier I was using Wayona Brand lightning cable with eventually frayed and stopped working.Charging Speed:Charges my iPhone fast enough almost similar compared to the original cable level when used with 12W Original Apple power adapter.Quality and Durability:Great quality braided cable and doesn’t tangle easily and can withstand day-to-day usage.L-Shaped pin:This is very innovative by Portronics and it makes sure the cable doesn’t get damaged even if used while charging.CarPlay and Data Sync:Works smoothly with CarPlay and syncs data effortlessly.PS: I have used this cable only with the Original Apple Charging Brick and extremely satisfied with its performance.,Better than I expect the product I like that Quality and I plan to buy same type cable come with usb C to Lighting cable for emergency purpose that much I love this cable. Buy for this cable only emergency uses only since Good one,Good product and value for money   

                                                                                                                       product_link  \
0         https://www.amazon.in/Wayona-Braided-WN3LG1-Syncing-Charging/dp/B07JW9H4J1/ref=sr_1_1?qid=1672909124&s=electronics&sr=1-1   
1     https://www.amazon.in/Ambrane-Unbreakable-Charging-Braided-Cable/dp/B098NS6PVG/ref=sr_1_2?qid=1672909124&s=electronics&sr=1-2   
2      https://www.amazon.in/Sounce-iPhone-Charging-Compatible-Devices/dp/B096MSW6CT/ref=sr_1_3?qid=1672909124&s=electronics&sr=1-3   
3   https://www.amazon.in/Deuce-300-Resistant-Tangle-Free-Transmission/dp/B08HDJ86NZ/ref=sr_1_4?qid=1672909124&s=electronics&sr=1-4   
4  https://www.amazon.in/Portronics-Konnect-POR-1080-Charging-Function/dp/B08CF3B7N1/ref=sr_1_5?qid=1672909124&s=electronics&sr=1-5   

                                                     image_url  
0  https://m.media-amazon.com/images/I/71ojkmsYe8L._SX425_.jpg  
1  https://m.media-amazon.com/images/I/61UzQMCRaeL._SX522_.jpg  
2  https://m.media-amazon.com/images/I/31zuK8FlwnL._SX385_.jpg  
3  https://m.media-amazon.com/images/I/61RtLSD47FL._SY450_.jpg  
4  https://m.media-amazon.com/images/I/617IU+aklGL._SX385_.jpg  
Device set to: cpu

[ ]
   1
!pip install seaborn matplotlib
Requirement already satisfied: seaborn in /usr/local/lib/python3.11/dist-packages (0.13.2)
Requirement already satisfied: matplotlib in /usr/local/lib/python3.11/dist-packages (3.10.0)
Requirement already satisfied: numpy!=1.24.0,>=1.20 in /usr/local/lib/python3.11/dist-packages (from seaborn) (1.26.4)
Requirement already satisfied: pandas>=1.2 in /usr/local/lib/python3.11/dist-packages (from seaborn) (2.2.2)
Requirement already satisfied: contourpy>=1.0.1 in /usr/local/lib/python3.11/dist-packages (from matplotlib) (1.3.1)
Requirement already satisfied: cycler>=0.10 in /usr/local/lib/python3.11/dist-packages (from matplotlib) (0.12.1)
Requirement already satisfied: fonttools>=4.22.0 in /usr/local/lib/python3.11/dist-packages (from matplotlib) (4.56.0)
Requirement already satisfied: kiwisolver>=1.3.1 in /usr/local/lib/python3.11/dist-packages (from matplotlib) (1.4.8)
Requirement already satisfied: packaging>=20.0 in /usr/local/lib/python3.11/dist-packages (from matplotlib) (24.2)
Requirement already satisfied: pillow>=8 in /usr/local/lib/python3.11/dist-packages (from matplotlib) (11.1.0)
Requirement already satisfied: pyparsing>=2.3.1 in /usr/local/lib/python3.11/dist-packages (from matplotlib) (3.2.1)
Requirement already satisfied: python-dateutil>=2.7 in /usr/local/lib/python3.11/dist-packages (from matplotlib) (2.8.2)
Requirement already satisfied: pytz>=2020.1 in /usr/local/lib/python3.11/dist-packages (from pandas>=1.2->seaborn) (2025.1)
Requirement already satisfied: tzdata>=2022.7 in /usr/local/lib/python3.11/dist-packages (from pandas>=1.2->seaborn) (2025.1)
Requirement already satisfied: six>=1.5 in /usr/local/lib/python3.11/dist-packages (from python-dateutil>=2.7->matplotlib) (1.17.0)

[ ]
1
amazon_df.info()
<class 'pandas.core.frame.DataFrame'>
RangeIndex: 1465 entries, 0 to 1464
Data columns (total 16 columns):
 #   Column               Non-Null Count  Dtype 
---  ------               --------------  ----- 
 0   product_id           1465 non-null   object
 1   product_name         1465 non-null   object
 2   category             1465 non-null   object
 3   discounted_price     1465 non-null   object
 4   actual_price         1465 non-null   object
 5   discount_percentage  1465 non-null   object
 6   rating               1465 non-null   object
 7   rating_count         1463 non-null   object
 8   about_product        1465 non-null   object
 9   user_id              1465 non-null   object
 10  user_name            1465 non-null   object
 11  review_id            1465 non-null   object
 12  review_title         1465 non-null   object
 13  review_content       1465 non-null   object
 14  product_link         1465 non-null   object
 15  image_url            1293 non-null   object
dtypes: object(16)
memory usage: 183.3+ KB

[ ]
1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677

plt.figure(figsize=(12, 6))  # Increase figure width
ax = sns.scatterplot(x='discount_percentage', y='rating',
                    data=amazon_df,
                    alpha=0.6,
                    hue='main_category',
                    palette='viridis')

# Move legend to right side outside plot
plt.legend(bbox_to_anchor=(1.05, 1), loc='upper left', borderaxespad=0)



[ ]
123456789101112131415161718192021222324252627
)

plt.title('Discounted Price Distribution by Main Category (USD)')
plt.ylabel('Main Category')
plt.xlabel('Discounted Price (USD)')
plt.tight_layout()
plt.show()

Enhanced Product Analysis Visualizations
1. Price-Rating Density by Category
Price-Rating Density

Purpose: Identify price-quality relationships across categories
Key Insights:
Clustering patterns show premium vs budget segments
Density peaks reveal popular price points per category
Helps spot overpriced/underpriced product groups
2. Top Brands Analysis
Top Brands

Purpose: Identify market leaders and brand concentration
Key Insights:
Dominant brands in product offerings
Market saturation levels
Potential for private label competition
3. Review Content Word Cloud
Word Cloud

Purpose: Surface common product attributes from reviews
Key Insights:
Most frequently mentioned features
Customer satisfaction drivers
Quality-related keywords prevalence
4. Price-Quality Matrix
Price-Quality Matrix

Purpose: Strategic product positioning analysis
Key Insights:
Premium vs value product clusters
Relationship between discounts and ratings
Popular products (bubble size = rating count)
5. Feature Importance Analysis
Feature Importance

Purpose: Identify key rating drivers
Key Insights:
Most influential factors on product ratings
Relative importance of price vs discounts
Impact of review volume on perceived quality
Key Cross-Analysis Observations
Price Sensitivity:

Electronics show tight price-quality correlation
Office products have wide price variation with similar ratings
Brand Influence:

Top 3 brands account for 40% of products
Brand concentration varies significantly by category
Review Themes:

"Durability" and "Performance" are most mentioned
Shipping experience appears as common secondary theme
Quality Drivers:

Rating count (popularity) has strongest correlation with ratings
Discount percentage shows weak negative correlation with quality

[ ]
1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950
# Price vs. Rating Density Plot (with Category Overlay)
# Convert rating to numeric first
amazon_df['rating'] = pd.to_numeric(amazon_df['rating'], errors='coerce')

plt.figure(figsize=(12, 8))
sns.kdeplot(
    data=amazon_df.dropna(subset=['rating']),
    x='discounted_price',
    y='rating',
    hue='main_category',



[ ]
   1
pip install --upgrade matplotlib
Requirement already satisfied: matplotlib in /usr/local/lib/python3.11/dist-packages (3.10.0)
Requirement already satisfied: contourpy>=1.0.1 in /usr/local/lib/python3.11/dist-packages (from matplotlib) (1.3.1)
Requirement already satisfied: cycler>=0.10 in /usr/local/lib/python3.11/dist-packages (from matplotlib) (0.12.1)
Requirement already satisfied: fonttools>=4.22.0 in /usr/local/lib/python3.11/dist-packages (from matplotlib) (4.56.0)
Requirement already satisfied: kiwisolver>=1.3.1 in /usr/local/lib/python3.11/dist-packages (from matplotlib) (1.4.8)
Requirement already satisfied: numpy>=1.23 in /usr/local/lib/python3.11/dist-packages (from matplotlib) (1.26.4)
Requirement already satisfied: packaging>=20.0 in /usr/local/lib/python3.11/dist-packages (from matplotlib) (24.2)
Requirement already satisfied: pillow>=8 in /usr/local/lib/python3.11/dist-packages (from matplotlib) (11.1.0)
Requirement already satisfied: pyparsing>=2.3.1 in /usr/local/lib/python3.11/dist-packages (from matplotlib) (3.2.1)
Requirement already satisfied: python-dateutil>=2.7 in /usr/local/lib/python3.11/dist-packages (from matplotlib) (2.8.2)
Requirement already satisfied: six>=1.5 in /usr/local/lib/python3.11/dist-packages (from python-dateutil>=2.7->matplotlib) (1.17.0)

[ ]
   1
   2
   3
   4
import matplotlib
print(f"Matplotlib version: {matplotlib.__version__}")
import seaborn as sns
print(f"Seaborn version: {sns.__version__}")
Matplotlib version: 3.10.0
Seaborn version: 0.13.2

[ ]
    1
    2
    3
    4
    5
    6
    7
    8
    9
   10
   11
   12
   13
   14
   15
   16
   17
   18
   19
   20
   21
   22
   23
   24
   25
   26
   27
   28
   29
   30
   31
   32
   33
   34
   35
   36
   37
   38
   39
   40
   41
   42
   43
   44
   45
   46
   47
   48
   49
   50
   51
   52
   53
   54
   55
   56
   57
   58
   59
   60
   61
   62
   63
   64
   65
   66
   67
   68
   69
   70
   71
   72
   73
   74
   75
   76
   77
   78
   79
   80
   81
   82
   83
   84
   85
   86
   87
   88
   89
   90
   91
   92
   93
   94
   95
   96
   97
   98
   99
  100
  101
  102
  103
  104
  105
  106
  107
  108
  109
  110
  111
  112
  113
  114
  115
  116
  117
  118
  119
  120
  121
  122
  123
  124
  125
  126
  127
  128
  129
  130
  131
  132
  133
  134
  135
  136
  137
  138
  139
  140
  141
  142
  143
  144
  145
  146
  147
  148
  149
  150
  151
  152
  153
  154
  155
  156
  157
# Price-Quality Quadrant Analysis
import matplotlib.pyplot as plt
import seaborn as sns
import numpy as np

# Clean numeric columns
numeric_cols = ['discounted_price', 'actual_price', 'discount_percentage', 'rating', 'rating_count']

for col in numeric_cols:
    amazon_df[col] = amazon_df[col].astype(str)
    amazon_df[col] = (
        amazon_df[col]
        .str.replace('[₹$,%]', '', regex=True)
        .str.replace(',', '')
        .astype(float)
    )

fig, ax = plt.subplots(figsize=(12, 8))  # Create figure and axes explicitly

# Create the scatter plot with specific axes
scatter = sns.scatterplot(
    x='discounted_price',
    y='rating',
    size='rating_count',
    hue='discount_percentage',
    data=amazon_df,
    palette='viridis',
    alpha=0.7,
    sizes=(20, 200),
    legend=False,
    ax=ax  # Pass the axes explicitly
)

# Function to format legend labels
def format_legend_label(value):
    if value >= 1e6:
        return f'{value/1e6:.1f}M'
    elif value >= 1e3:
        return f'{value/1e3:.0f}K'
    else:
        return f'{value:.0f}'

# Create manually defined size values for the legend
min_count = amazon_df['rating_count'].min()
max_count = amazon_df['rating_count'].max()

if max_count > 1000:
    size_values = [100, 1000, 10000, 100000]
    size_values = [s for s in size_values if min_count <= s <= max_count]
    if not size_values:
        size_values = [
            min_count,
            min(max_count, min_count * 10),
            min(max_count, min_count * 100)
        ]
else:
    size_values = [
        min_count,
        min_count + (max_count - min_count) * 0.33,
        min_count + (max_count - min_count) * 0.67,
        max_count
    ]

# Size mapping function
def map_size_to_point_size(value, min_val, max_val, min_size=20, max_size=200):
    if max_val == min_val:
        return min_size
    normalized = (value - min_val) / (max_val - min_val)
    return min_size + normalized * (max_size - min_size)

# Create dummy scatter points for the legend
size_handles = [
    plt.scatter([], [],
                s=map_size_to_point_size(s, min_count, max_count),
                color='gray', alpha=0.7)
    for s in size_values
]

# Format the labels
size_labels = [format_legend_label(s) for s in size_values]

# Add custom legend for SIZE
size_legend = ax.legend(
    size_handles,
    size_labels,
    title='Rating Count',
    bbox_to_anchor=(1.15, 1),
    loc='upper left',
    frameon=False
)
ax.add_artist(size_legend)  # Add size legend to plot

# Add colorbar for HUE (discount_percentage)
norm = plt.Normalize(
    amazon_df['discount_percentage'].min(),
    amazon_df['discount_percentage'].max()
)
sm = plt.cm.ScalarMappable(cmap='viridis', norm=norm)
sm.set_array([])
plt.colorbar(sm, ax=ax, label='Discount Percentage (%)')  # Pass ax to colorbar

# Add quadrant lines based on medians
median_price = amazon_df['discounted_price'].median()
median_rating = amazon_df['rating'].median()

ax.axvline(x=median_price, color='gray', linestyle='--', alpha=0.5)
ax.axhline(y=median_rating, color='gray', linestyle='--', alpha=0.5)

# Get current axis limits
x_min, x_max = ax.get_xlim()
y_min, y_max = ax.get_ylim()

# Calculate positions for quadrant labels
high_x = median_price + (x_max - median_price) * 0.6
low_x = median_price - (median_price - x_min) * 0.6
high_y = median_rating + (y_max - median_rating) * 0.6
low_y = median_rating - (median_rating - y_min) * 0.6

# Add quadrant labels with white background
ax.text(high_x, high_y, 'Premium', fontsize=12,
       bbox=dict(facecolor='white', alpha=0.7, edgecolor='none', pad=3))
ax.text(low_x, high_y, 'High Value', fontsize=12,
       bbox=dict(facecolor='white', alpha=0.7, edgecolor='none', pad=3))
ax.text(high_x, low_y, 'Overpriced', fontsize=12,
       bbox=dict(facecolor='white', alpha=0.7, edgecolor='none', pad=3))
ax.text(low_x, low_y, 'Budget', fontsize=12,
       bbox=dict(facecolor='white', alpha=0.7, edgecolor='none', pad=3))

# Count products in each quadrant
q1_count = ((amazon_df['discounted_price'] >= median_price) &
            (amazon_df['rating'] >= median_rating)).sum()
q2_count = ((amazon_df['discounted_price'] < median_price) &
            (amazon_df['rating'] >= median_rating)).sum()
q3_count = ((amazon_df['discounted_price'] >= median_price) &
            (amazon_df['rating'] < median_rating)).sum()
q4_count = ((amazon_df['discounted_price'] < median_price) &
            (amazon_df['rating'] < median_rating)).sum()

# Add counts to the plot using fig instead of plt
fig.text(0.80, 0.03, f"Premium: {q1_count}", fontsize=9)
fig.text(0.20, 0.03, f"High Value: {q2_count}", fontsize=9)
fig.text(0.80, 0.01, f"Overpriced: {q3_count}", fontsize=9)
fig.text(0.20, 0.01, f"Budget: {q4_count}", fontsize=9)

ax.set_title('Price-Quality Matrix with Popularity Indicators', fontsize=14)
ax.set_xlabel('Price (USD)', fontsize=12)
ax.set_ylabel('Rating', fontsize=12)
ax.grid(True, alpha=0.3)
plt.tight_layout()
plt.show()

# Print quadrant statistics
print("\nQuadrant Analysis:")
print(f"Premium Products (high price, high rating): {q1_count} products")
print(f"High Value Products (low price, high rating): {q2_count} products")
print(f"Overpriced Products (high price, low rating): {q3_count} products")
print(f"Budget Products (low price, low rating): {q4_count} products")

Feature Importance Analysis using RandomForestRegressor
RandomForestRegressor - a traditional machine learning model that's excellent for:
Measuring feature importance without needing extensive training
Handling non-linear relationships between variables
Working well on small-to-medium datasets
Providing reliable importance scores without overfitting

[ ]
123456789101112131415161718192021222324252627282930313233343536
# Feature Importance Analysis
from sklearn.ensemble import RandomForestRegressor

# Check where NaN values are in the data
print("NaN counts in X:")
print(X.isna().sum())
print("\nNaN counts in y:")
print(y.isna().sum())

# Remove rows with NaN values in either X or y



[ ]
   1
   2
   3
   4
   5
   6
   7
   8
   9
  10
  11
  12
  13
  14
  15
  16
  17
  18
  19
  20
  21
  22
  23
  24
  25
  26
  27
  28
  29
  30
  31
  32
  33
  34
  35
  36
  37
  38
  39
  40
  41
  42
  43
  44
  45
  46
  47
  48
  49
  50
  51
  52
  53
  54
  55
  56
from sklearn.ensemble import RandomForestRegressor
from sklearn.preprocessing import OneHotEncoder
from sklearn.feature_extraction.text import TfidfVectorizer
import numpy as np
import pandas as pd

# Ensure numeric columns are properly converted
numeric_cols = ['discounted_price', 'actual_price', 'discount_percentage', 'rating_count']
for col in numeric_cols:
    amazon_df[col] = pd.to_numeric(amazon_df[col].astype(str).str.replace('[₹$,%]', '', regex=True).str.replace(',', ''), errors='coerce')

# Target variable
y = pd.to_numeric(amazon_df['rating'], errors='coerce')
valid_indices = ~y.isna()
y_clean = y[valid_indices]

# 1. Process numeric features
X_numeric = amazon_df[numeric_cols].fillna(0)[valid_indices]

# 2. Process categorical features
categorical_features = ['category']
encoder = OneHotEncoder(sparse_output=False, handle_unknown='ignore')
X_categorical = encoder.fit_transform(amazon_df[categorical_features].fillna('Unknown')[valid_indices])
categorical_feature_names = encoder.get_feature_names_out(categorical_features)

# 3. Process text features (simplified - using only about_product)
# Limit features to control dimensionality
text_vectorizer = TfidfVectorizer(max_features=50, stop_words='english')
X_text = text_vectorizer.fit_transform(amazon_df['about_product'].fillna('')[valid_indices]).toarray()
text_feature_names = text_vectorizer.get_feature_names_out()

# Combine all features
X_combined = np.hstack([X_numeric, X_categorical, X_text])
all_feature_names = list(numeric_cols) + list(categorical_feature_names) + list(text_feature_names)

# Train model
model = RandomForestRegressor(random_state=42, n_estimators=100)
model.fit(X_combined, y_clean)

# Get top 20 features
importances = model.feature_importances_
indices = np.argsort(importances)[-20:]  # Get indices of top 20 features

# Plot
plt.figure(figsize=(12, 10))
plt.barh(range(len(indices)), importances[indices], align='center')
plt.yticks(range(len(indices)), [all_feature_names[i] for i in indices])
plt.title('Top 20 Features Influencing Product Rating')
plt.xlabel('Importance Score')
plt.tight_layout()
plt.show()

# Print top features
print("Top 20 features by importance:")
for i in indices[::-1]:
    print(f"{all_feature_names[i]}: {importances[i]:.4f}")


[ ]
   1

Colab paid products - Cancel contracts here


# Price vs. Rating Density Plot (with Category Overlay)
# Convert rating to numeric first
amazon_df['rating'] = pd.to_numeric(amazon_df['rating'], errors='coerce')

plt.figure(figsize=(12, 8))
sns.kdeplot(
    data=amazon_df.dropna(subset=['rating']),
    x='discounted_price',
    y='rating',
    hue='main_category',
    palette='viridis',
    alpha=0.6,
    fill=True,
    thresh=0.05
)
plt.title('Price-Rating Density by Category')
plt.xlabel('Discounted Price (USD)')
plt.ylabel('Rating')
plt.legend(bbox_to_anchor=(1.05, 1), loc='upper left')
plt.show()

# Brand Prevalence Analysis (from Product Names)
# Extract brands from product names
amazon_df['brand'] = amazon_df['product_name'].str.extract(r'^([A-Za-z0-9]+)')

# Plot top brands
top_brands = amazon_df['brand'].value_counts().nlargest(10)
plt.figure(figsize=(12, 6))
sns.barplot(x=top_brands.values, y=top_brands.index, palette='rocket')
plt.title('Top 10 Brands by Product Count')
plt.xlabel('Number of Products')
plt.ylabel('Brand')
plt.show()

# eview Content Word Cloud
from wordcloud import WordCloud

# Combine all reviews
text = ' '.join(amazon_df['review_content'].dropna())

# Generate word cloud
wordcloud = WordCloud(width=800, height=400,
                     background_color='white').generate(text)

plt.figure(figsize=(12, 6))
plt.imshow(wordcloud, interpolation='bilinear')
plt.axis('off')
plt.title('Common Themes in Product Reviews')
plt.show()

pip install --upgrade matplotlib

import matplotlib
print(f"Matplotlib version: {matplotlib.__version__}")
import seaborn as sns
print(f"Seaborn version: {sns.__version__}")


# Price-Quality Quadrant Analysis
import matplotlib.pyplot as plt
import seaborn as sns
import numpy as np

# Clean numeric columns
numeric_cols = ['discounted_price', 'actual_price', 'discount_percentage', 'rating', 'rating_count']

for col in numeric_cols:
    amazon_df[col] = amazon_df[col].astype(str)
    amazon_df[col] = (
        amazon_df[col]
        .str.replace('[₹$,%]', '', regex=True)
        .str.replace(',', '')
        .astype(float)
    )

fig, ax = plt.subplots(figsize=(12, 8))  # Create figure and axes explicitly

# Create the scatter plot with specific axes
scatter = sns.scatterplot(
    x='discounted_price',
    y='rating',
    size='rating_count',
    hue='discount_percentage',
    data=amazon_df,
    palette='viridis',
    alpha=0.7,
    sizes=(20, 200),
    legend=False,
    ax=ax  # Pass the axes explicitly
)

# Function to format legend labels
def format_legend_label(value):
    if value >= 1e6:
        return f'{value/1e6:.1f}M'
    elif value >= 1e3:
        return f'{value/1e3:.0f}K'
    else:
        return f'{value:.0f}'

# Create manually defined size values for the legend
min_count = amazon_df['rating_count'].min()
max_count = amazon_df['rating_count'].max()

if max_count > 1000:
    size_values = [100, 1000, 10000, 100000]
    size_values = [s for s in size_values if min_count <= s <= max_count]
    if not size_values:
        size_values = [
            min_count,
            min(max_count, min_count * 10),
            min(max_count, min_count * 100)
        ]
else:
    size_values = [
        min_count,
        min_count + (max_count - min_count) * 0.33,
        min_count + (max_count - min_count) * 0.67,
        max_count
    ]

# Size mapping function
def map_size_to_point_size(value, min_val, max_val, min_size=20, max_size=200):
    if max_val == min_val:
        return min_size
    normalized = (value - min_val) / (max_val - min_val)
    return min_size + normalized * (max_size - min_size)

# Create dummy scatter points for the legend
size_handles = [
    plt.scatter([], [],
                s=map_size_to_point_size(s, min_count, max_count),
                color='gray', alpha=0.7)
    for s in size_values
]

# Format the labels
size_labels = [format_legend_label(s) for s in size_values]

# Add custom legend for SIZE
size_legend = ax.legend(
    size_handles,
    size_labels,
    title='Rating Count',
    bbox_to_anchor=(1.15, 1),
    loc='upper left',
    frameon=False
)
ax.add_artist(size_legend)  # Add size legend to plot

# Add colorbar for HUE (discount_percentage)
norm = plt.Normalize(
    amazon_df['discount_percentage'].min(),
    amazon_df['discount_percentage'].max()
)
sm = plt.cm.ScalarMappable(cmap='viridis', norm=norm)
sm.set_array([])
plt.colorbar(sm, ax=ax, label='Discount Percentage (%)')  # Pass ax to colorbar

# Add quadrant lines based on medians
median_price = amazon_df['discounted_price'].median()
median_rating = amazon_df['rating'].median()

ax.axvline(x=median_price, color='gray', linestyle='--', alpha=0.5)
ax.axhline(y=median_rating, color='gray', linestyle='--', alpha=0.5)

# Get current axis limits
x_min, x_max = ax.get_xlim()
y_min, y_max = ax.get_ylim()

# Calculate positions for quadrant labels
high_x = median_price + (x_max - median_price) * 0.6
low_x = median_price - (median_price - x_min) * 0.6
high_y = median_rating + (y_max - median_rating) * 0.6
low_y = median_rating - (median_rating - y_min) * 0.6

# Add quadrant labels with white background
ax.text(high_x, high_y, 'Premium', fontsize=12,
       bbox=dict(facecolor='white', alpha=0.7, edgecolor='none', pad=3))
ax.text(low_x, high_y, 'High Value', fontsize=12,
       bbox=dict(facecolor='white', alpha=0.7, edgecolor='none', pad=3))
ax.text(high_x, low_y, 'Overpriced', fontsize=12,
       bbox=dict(facecolor='white', alpha=0.7, edgecolor='none', pad=3))
ax.text(low_x, low_y, 'Budget', fontsize=12,
       bbox=dict(facecolor='white', alpha=0.7, edgecolor='none', pad=3))

# Count products in each quadrant
q1_count = ((amazon_df['discounted_price'] >= median_price) &
            (amazon_df['rating'] >= median_rating)).sum()
q2_count = ((amazon_df['discounted_price'] < median_price) &
            (amazon_df['rating'] >= median_rating)).sum()
q3_count = ((amazon_df['discounted_price'] >= median_price) &
            (amazon_df['rating'] < median_rating)).sum()
q4_count = ((amazon_df['discounted_price'] < median_price) &
            (amazon_df['rating'] < median_rating)).sum()

# Add counts to the plot using fig instead of plt
fig.text(0.80, 0.03, f"Premium: {q1_count}", fontsize=9)
fig.text(0.20, 0.03, f"High Value: {q2_count}", fontsize=9)
fig.text(0.80, 0.01, f"Overpriced: {q3_count}", fontsize=9)
fig.text(0.20, 0.01, f"Budget: {q4_count}", fontsize=9)

ax.set_title('Price-Quality Matrix with Popularity Indicators', fontsize=14)
ax.set_xlabel('Price (USD)', fontsize=12)
ax.set_ylabel('Rating', fontsize=12)
ax.grid(True, alpha=0.3)
plt.tight_layout()
plt.show()

# Print quadrant statistics
print("\nQuadrant Analysis:")
print(f"Premium Products (high price, high rating): {q1_count} products")
print(f"High Value Products (low price, high rating): {q2_count} products")
print(f"Overpriced Products (high price, low rating): {q3_count} products")
print(f"Budget Products (low price, low rating): {q4_count} products")


Feature Importance Analysis using RandomForestRegressor
RandomForestRegressor - a traditional machine learning model that's excellent for:
Measuring feature importance without needing extensive training
Handling non-linear relationships between variables
Working well on small-to-medium datasets
Providing reliable importance scores without overfitting

# Feature Importance Analysis
from sklearn.ensemble import RandomForestRegressor

# Check where NaN values are in the data
print("NaN counts in X:")
print(X.isna().sum())
print("\nNaN counts in y:")
print(y.isna().sum())

# Remove rows with NaN values in either X or y
valid_indices = ~(X.isna().any(axis=1) | y.isna())
X_clean = X[valid_indices]
y_clean = y[valid_indices]

print(f"\nRemoved {len(X) - len(X_clean)} rows with NaN values")
print(f"Remaining dataset size: {len(X_clean)} rows")

# Train model with clean data
model = RandomForestRegressor(random_state=42)
model.fit(X_clean, y_clean)

# Plot feature importance
importances = model.feature_importances_
features = X_clean.columns

plt.figure(figsize=(10, 6))
sns.barplot(x=importances, y=features, palette='mako')
plt.title('Feature Importance for Product Rating Prediction')
plt.xlabel('Importance Score')
plt.ylabel('Features')
plt.tight_layout()
plt.show()

# Print actual importance values
for feature, importance in zip(features, importances):
    print(f"{feature}: {importance:.4f}")


    from sklearn.ensemble import RandomForestRegressor
from sklearn.preprocessing import OneHotEncoder
from sklearn.feature_extraction.text import TfidfVectorizer
import numpy as np
import pandas as pd

# Ensure numeric columns are properly converted
numeric_cols = ['discounted_price', 'actual_price', 'discount_percentage', 'rating_count']
for col in numeric_cols:
    amazon_df[col] = pd.to_numeric(amazon_df[col].astype(str).str.replace('[₹$,%]', '', regex=True).str.replace(',', ''), errors='coerce')

# Target variable
y = pd.to_numeric(amazon_df['rating'], errors='coerce')
valid_indices = ~y.isna()
y_clean = y[valid_indices]

# 1. Process numeric features
X_numeric = amazon_df[numeric_cols].fillna(0)[valid_indices]

# 2. Process categorical features
categorical_features = ['category']
encoder = OneHotEncoder(sparse_output=False, handle_unknown='ignore')
X_categorical = encoder.fit_transform(amazon_df[categorical_features].fillna('Unknown')[valid_indices])
categorical_feature_names = encoder.get_feature_names_out(categorical_features)

# 3. Process text features (simplified - using only about_product)
# Limit features to control dimensionality
text_vectorizer = TfidfVectorizer(max_features=50, stop_words='english')
X_text = text_vectorizer.fit_transform(amazon_df['about_product'].fillna('')[valid_indices]).toarray()
text_feature_names = text_vectorizer.get_feature_names_out()

# Combine all features
X_combined = np.hstack([X_numeric, X_categorical, X_text])
all_feature_names = list(numeric_cols) + list(categorical_feature_names) + list(text_feature_names)

# Train model
model = RandomForestRegressor(random_state=42, n_estimators=100)
model.fit(X_combined, y_clean)

# Get top 20 features
importances = model.feature_importances_
indices = np.argsort(importances)[-20:]  # Get indices of top 20 features

# Plot
plt.figure(figsize=(12, 10))
plt.barh(range(len(indices)), importances[indices], align='center')
plt.yticks(range(len(indices)), [all_feature_names[i] for i in indices])
plt.title('Top 20 Features Influencing Product Rating')
plt.xlabel('Importance Score')
plt.tight_layout()
plt.show()

# Print top features
print("Top 20 features by importance:")
for i in indices[::-1]:
    print(f"{all_feature_names[i]}: {importances[i]:.4f}")